<?php

namespace Izupet\Api\Traits;

use Illuminate\Http\JsonResponse;
use Request;

trait ApiResponse {

  /**
   * Main respond method. This method can be called directly or by child methods.
   *
   * @return JsonResponse
   */
    public function respond($message, $HTTPStatusCode, $data = null, array $extras = [])
    {
        $meta = array_merge([
            'status'    => $status = $this->getStatus($HTTPStatusCode),
            'message'   => $message,
            'code'      => $HTTPStatusCode
        ], $extras);

        $data = is_null($data) ?: $this->toCamelCase($data->toArray());

        return new JsonResponse(
            compact('meta', $status === 'error' ?: 'data'),
            array_key_exists('suppressResponseHttpStatusCode', Request::all()) ? 200 : $HTTPStatusCode
        );
    }

    /**
     * Get the response status (success or error) according to HTTP status code.
     *
     * @param int $HTTPStatusCode
     * @return string
     */
    public function getStatus($HTTPStatusCode)
    {
        return in_array((int) substr($HTTPStatusCode, 0, 1), [2, 3]) ? 'success' : 'error';
    }

    /**
     * This should be called when response data is generated by apiGet Builder method.
     *
     * @param object $data
     * @return JsonResponse
     */
    public function respondCollection($data)
    {
        return $this->respond(
            'Ok.',
            200,
            $data->collection,
            [
                'total' => $data->total,
                'limit' => $data->limit,
                'offset' => $data->offset
            ]
        );
    }

    /**
     * Method formats response when response data is single object.
     *
     * @param object $data
     * @return JsonResponse
     */
    public function respondOne($data)
    {
        return $this->respond(
            'Ok.',
            200,
            $data
        );
    }

    /**
     * Conver all properties (array keys) to camel case.
     *
     * @param array $data
     * @return array
     */
    private function toCamelCase(array $data)
    {
        foreach ($data as $key => $value)
        {
            if (is_array($value)) {
                $value = $this->toCamelCase($value);
            }

            unset($data[$key]);
            $data[camel_case($key)] = $value;
        }

        return $data;
    }
}
